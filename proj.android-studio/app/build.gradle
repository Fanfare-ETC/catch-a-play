import org.gradle.internal.os.OperatingSystem;
apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    defaultConfig {
        applicationId 'edu.cmu.etc.fanfare.playbook'
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 31
        versionName '1.4.2'

        buildConfigField 'String', 'PLAYBOOK_TREASUREHUNT_API_HOST', '"10.0.2.2"'
        buildConfigField 'Integer', 'PLAYBOOK_TREASUREHUNT_API_PORT', '9000'
        buildConfigField 'String', 'PLAYBOOK_API_HOST', '"10.0.2.2"'
        buildConfigField 'Integer', 'PLAYBOOK_API_PORT', '9001'
        buildConfigField 'String', 'PLAYBOOK_SECTION_API_HOST', '"10.0.2.2"'
        buildConfigField 'Integer', 'PLAYBOOK_SECTION_API_PORT', '9002'
        buildConfigField 'String', 'PLAYBOOK_SECTION_APP', '"players"'
        buildConfigField 'String', 'PLAYBOOK_LEADER_APP', '"leaderboard"'
        buildConfigField 'String', 'PLAYBOOK_LEADERP_APP', '"leaderboardP"'
        buildConfigField 'String', 'PLAYBOOK_LEADERC_APP', '"leaderboardC"'
        buildConfigField 'String', 'PLAYBOOK_SELF_APP', '"selfScore"'
        buildConfigField 'String', 'PLAYBOOK_TROPHY_APP', '"myTrophy"'
    }

    sourceSets.main {
        java.srcDir 'src'
        res.srcDir 'res'
        jniLibs.srcDir 'libs'
        manifest.srcFile 'AndroidManifest.xml'
        assets.srcDir 'assets'
    }

    signingConfigs {
        staging {
            if (project.hasProperty('RELEASE_STORE_FILE')) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }

        release {
            if (project.hasProperty('RELEASE_STORE_FILE')) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        staging {
            buildConfigField 'String', 'PLAYBOOK_TREASUREHUNT_API_HOST', '"staging.fanfare.wong.place"'
            buildConfigField 'Integer', 'PLAYBOOK_TREASUREHUNT_API_PORT', '9000'
            buildConfigField 'String', 'PLAYBOOK_API_HOST', '"staging.fanfare.wong.place"'
            buildConfigField 'Integer', 'PLAYBOOK_API_PORT', '9001'
            buildConfigField 'String', 'PLAYBOOK_SECTION_API_HOST', '"staging.fanfare.wong.place"'
            buildConfigField 'Integer', 'PLAYBOOK_SECTION_API_PORT', '9002'

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty('RELEASE_STORE_FILE')) {
                signingConfig signingConfigs.staging
            }
        }

        release {
            buildConfigField 'String', 'PLAYBOOK_TREASUREHUNT_API_HOST', '"fanfare.wong.place"'
            buildConfigField 'Integer', 'PLAYBOOK_TREASUREHUNT_API_PORT', '9000'
            buildConfigField 'String', 'PLAYBOOK_API_HOST', '"fanfare.wong.place"'
            buildConfigField 'Integer', 'PLAYBOOK_API_PORT', '9001'
            buildConfigField 'String', 'PLAYBOOK_SECTION_API_HOST', '"fanfare.wong.place"'
            buildConfigField 'Integer', 'PLAYBOOK_SECTION_API_PORT', '9002'

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty('RELEASE_STORE_FILE')) {
                signingConfig signingConfigs.release
            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:support-v4:25.1.1'
    compile 'com.android.support:support-v13:25.1.1'
    compile 'com.android.support:appcompat-v7:25.1.1'
    compile 'com.google.android.gms:play-services-auth:10.2.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:design:25.1.1'
    compile 'com.google.firebase:firebase-messaging:10.2.0'
    compile 'com.firebaseui:firebase-ui-auth:1.2.0'
    compile 'com.koushikdutta.async:androidasync:2.+'

}

task npmInstall(type: Exec) {
    workingDir '../../webgl'
    if (OperatingSystem.current().isWindows()) {
        executable 'npm.cmd'
    } else {
        executable 'npm'
    }
    args 'install'
    inputs.dir '../../webgl/package.json'
    outputs.dir '../../webgl/node_modules'
}

task webpackBuild(type: Exec) {
    workingDir '../../webgl'
    if (OperatingSystem.current().isWindows()) {
        executable 'npm.cmd'
    } else {
        executable 'npm'
    }
    args 'run', 'build'
    inputs.dir '../../webgl'
    outputs.dir '../../webgl/public'
    dependsOn npmInstall
}

task webpackSync(type: Sync) {
    from '../../webgl/public'
    into 'assets'
    dependsOn webpackBuild
}

task cleanAssets(type: Delete) {
    delete 'assets'
}

clean.dependsOn cleanAssets
preBuild.dependsOn webpackSync

apply plugin: 'com.google.gms.google-services'
